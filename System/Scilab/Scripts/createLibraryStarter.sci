// Copyright (c) 2017, Linz Center of Mechatronics GmbH (LCM) http://www.lcm.at/
// All rights reserved.
//
// This file is licensed according to the BSD 3-clause license as follows:
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the "Linz Center of Mechatronics GmbH" and "LCM" nor
//       the names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL "Linz Center of Mechatronics GmbH" BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// This file is part of X2C. http://www.mechatronic-simulation.org/
// $LastChangedRevision: 1111 $
// $LastChangedDate:: 2017-02-28 14:18:07 +0100#$
//
// Function to create 'starter.sce' for X2C libraries
// Parameters:
// libName - Library name
// varargin - (optional) project root directory for external blocks

function [] = createLibraryStarter(libName, varargin)
funcprot(0);

// import necessary java classes
jimport at.lcm.x2c.core.structure.ControlBlock;
jimport at.lcm.x2c.core.structure.Block;
jimport at.lcm.x2c.utils.LibraryUtils;
jimport at.lcm.x2c.utils.Utils;
jimport at.lcm.x2c.core.structure.VisualizationScilabXcos;

// get current directory
currentDir = pwd();

// get file separator
fs = filesep(); 

// more or less arbitrary chosen suffix for palette
paletteSuffix = ".xpal";

// check library type
if length(varargin) == 0 then
    // internal library
    isIntern = %t;
elseif length(varargin) == 1 then
    // external library
    isIntern = %f;
else
    error("Invalid number of input arguments");
end

// get XML file names
if isIntern then
    // internal library
    xmlPath = jinvoke(LibraryUtils, "getXmlDirectory", libName);
else
    // external library
    libRoot = jinvoke(LibraryUtils, "getLibraryRootDirectory", varargin(1))
    libRoot = jinvoke(libRoot, "toString");
    xmlPath = jinvoke(LibraryUtils, "getXmlDirectory", libName, libRoot);
end
xmlDir = jinvoke(xmlPath, "toString");



// get/create scilab directory
scilabDir = strsubst(xmlDir, ["XML" + fs], ["Scilab" + fs]);
if ~isdir(scilabDir) then
    mkdir(scilabDir)
end


// get XML files
xmlFiles = dir(xmlDir + "*.xml");
xmlFiles = xmlFiles(2)';
xmlList = [];

// go through XML list
for curXML = xmlFiles
    temp = part(curXML, $-3:$)
    convstr(temp,"l")
    if ~strcmp(temp, ".xml") then
        // add file name with *.xml ending
        xmlList = [xmlList, curXML];
    end
end


chdir(scilabDir);
// get file relevant file names
interfaceList = ls("*.sci")';

// remove palette
fileName = [libName + paletteSuffix];
if isfile(fileName) then
    mdelete(fileName);
end
chdir(currentDir);

try

    // open/create file
    fileName = scilabDir + "starter.sce";
    fileID = mopen(fileName, "wt");
    
    // print header
    time = datevec(datenum());
    mfprintf(fileID, "// This file was generated by %s on %02d-%02d-%04d %02d:%02d\n\n", "createLibraryStarter.sce", time(3), time(2), time(1), time(4), time(5));
    // TODO: expand file header
    

    mfprintf(fileID, "mprintf('"+++ Loading X2C library %s\\n'");\n", libName); 
    mfprintf(fileID, "funcprot(0);\n");
    mfprintf(fileID, "jimport('"at.lcm.x2c.utils.Utils'");\n");
    mfprintf(fileID, "X2CRootDir = jinvoke(jinvoke(Utils, '"getRootDirectory'"), '"toString'");\n");
    mfprintf(fileID, "X2CRootDir = strsubst(X2CRootDir, '"\\'", '"/'");\n");
    if isIntern then
        rootDir = jinvoke(jinvoke(Utils, "getRootDirectory"), "toString");
        rootDir = strsubst(rootDir, "\", "/");
    else
        rootDir = strsubst(varargin(1), "\", "/");
        mfprintf(fileID, "ProjectDir = strsubst('"%s'", '"\\'", '"/'");\n", varargin(1));
    end
    
    mfprintf(fileID, "curDir = strsubst(pwd(), '"\\'", '"/'");\n");
    
    mfprintf(fileID, "fs = filesep();\n");
    mfprintf(fileID, "\n");
    
    // enter all interface functions
    mfprintf(fileID, "// load interface functions\n");
    for curInterface = interfaceList
        mfprintf(fileID, "exec('"%s'", -1);\n", curInterface);
    end
    mfprintf(fileID, "\n");
    
    // enter all blocks
    mfprintf(fileID, "// load/create palette for library\n");
    mfprintf(fileID, "if isfile('"%s%s'")\n", libName, paletteSuffix);
    mfprintf(fileID, "    // palette already exists -> load saved palette\n");
    mfprintf(fileID, "    xcosPalAdd('"%s%s'", '"X2C'");\n", libName, paletteSuffix);
    mfprintf(fileID, "else\n");
    mfprintf(fileID, "    \n");
    mfprintf(fileID, "    // load blocks and build palette\n");
    mfprintf(fileID, "    pal = xcosPal('"%s'");\n", libName);
    mfprintf(fileID, "    allIconsAvailable = %%t;\n");
    mfprintf(fileID, "    \n");
    
    // add normal blocks
    for curXml=xmlList

        // read block XML file
        x2cBlock = jinvoke(Block, "loadBlockXML", curXml);
        blockType = jinvoke(jinvoke(x2cBlock, "getClass"), "toString");
        blockName = jinvoke(x2cBlock, "getName");
        
        // check block type
        if ~strcmp(blockType, "class at.lcm.x2c.core.structure.ControlBlock") then // normal Block
        
            if isIntern then
                // internal library
                xcosName = getXcosBlockName(libName, blockName);
            else
                // external library
                xcosName = getXcosBlockName(libName, blockName, varargin(1));
            end
            
            // enter block data
            mfprintf(fileID, "    // %s\n", blockName);
            mfprintf(fileID, "    mprintf('"Loading block %s...'")\n", blockName);
            mfprintf(fileID, "    o = %s('"define'");\n", xcosName);
            mfprintf(fileID, "    pal_icon = X2CRootDir + '"Library'" + fs + '"%s'" + fs + '"Doc'" + fs + '"Icons'" + fs + '"%s'" + '".png'";\n", libName, blockName);
            mfprintf(fileID, "    if ~isfile(pal_icon)\n")
            mfprintf(fileID, "        pal_icon = [];\n");
            mfprintf(fileID, "        allIconsAvailable = %%f;\n");
            mfprintf(fileID, "    end\n");
            mfprintf(fileID, "    style = struct();\n");
            mfprintf(fileID, "    style.rounded = %%f; // rectangular block with sharp edges\n");
            mfprintf(fileID, "    style.fillColor = '"#61BDFC'" // light blue;\n");
            mfprintf(fileID, "    style.gradientColor = '"#61BDFC'" // light blue;\n");
            
            block = jnewInstance(ControlBlock);
            jinvoke(block, "readBlockXml", curXml);
            mask = jinvoke(block, "getMask");
            try
                visual = jinvoke(mask, "getVisualizationScilabXcos");
                visualizationStyle = jinvoke(jinvoke(mask, "getVisualizationScilabXcos"), "getScriptStyle");
                mfprintf(fileID, "// ++ BlockGenerator: Style\n");
                mfprintf(fileID, "%s", visualizationStyle);
                mfprintf(fileID, "// -- BlockGenerator: Style\n");
            catch
                // block has no Scilab/Xcos visualization -> fall back to default image
                if ~isfile(rootDir + "Library/" + libName + "/Doc/Images/" + blockName + ".svg") then
                    // no block image available -> create one
                    if isIntern then
                        createDefaultBlockImg(libName, blockName);
                    else
                        createDefaultBlockImg(libName, blockName, varargin(1));
                    end
                end
                mfprintf(fileID, "    style.image = '"file:///'" + curDir + '"/../Doc/Images/%s.svg'";\n", blockName)
                
            end

        else    // IO-Block
            mfprintf(fileID, "    // %s\n", blockName);
            mfprintf(fileID, "    mprintf('"Loading block %s...'")\n", blockName);
            mfprintf(fileID, "    o = x2c_%s('"define'");\n", blockName);
            mfprintf(fileID, "    style = struct();\n");
            mfprintf(fileID, "    style.opacity = 0;\n");
            mfprintf(fileID, "    style.image='"file:///'" + X2CRootDir + '"/Library/%s/Doc/Images/%s.svg'"\n", libName, blockName);
            mfprintf(fileID, "    pal_icon = X2CRootDir + '"Library'" + fs + '"%s'" + fs + '"Doc'" + fs + '"Icons'" + fs + '"%s'" + '".png'";\n", libName, blockName);
            mfprintf(fileID, "    if ~isfile(pal_icon)\n")
            mfprintf(fileID, "        pal_icon = [];\n");
            mfprintf(fileID, "        allIconsAvailable = %%f;\n");
            mfprintf(fileID, "    end\n");
        end
    
        mfprintf(fileID, "    pal = xcosPalAddBlock(pal, o, pal_icon, style);\n");
        mfprintf(fileID, "    clear('"o'");\n");
        mfprintf(fileID, "    mprintf('"done\\n'");\n");
        mfprintf(fileID, "    \n");
    end
    
    mfprintf(fileID, "    \n\n");
    mfprintf(fileID, "    // load palette\n");
    mfprintf(fileID, "    xcosPalAdd(pal, '"X2C'");\n");
    mfprintf(fileID, "    \n");
    mfprintf(fileID, "    if allIconsAvailable then\n");
    mfprintf(fileID, "        // save palette\n");
    mfprintf(fileID, "        xcosPalExport(pal, '"%s%s'");\n", libName, paletteSuffix);
    mfprintf(fileID, "    end\n");
    mfprintf(fileID, "    \n");
    
    mfprintf(fileID, "    // cleanup\n");
    mfprintf(fileID, "    clear('"pal'")\n");
    mfprintf(fileID, "    clear('"pal_icon'")\n");
    mfprintf(fileID, "    clear('"style'")\n");
    mfprintf(fileID, "    \n");
    mfprintf(fileID, "end\n");
    mfprintf(fileID, "\n");
    
    mfprintf(fileID, "mprintf('"---\\n'");\n"); 

    // close file
    mclose(fileID);
    mprintf("Library starter file %s successfully written.\n", fileName);
    
catch
    // some error creating the file occured
    mclose(fileID); // try to close the file
    disp("Error creating starter file for library " + libName + ": " + lasterror());
end

endfunction

