// Copyright (c) 2017, Linz Center of Mechatronics GmbH (LCM) http://www.lcm.at/
// All rights reserved.
//
// This file is licensed according to the BSD 3-clause license as follows:
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the "Linz Center of Mechatronics GmbH" and "LCM" nor
//       the names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL "Linz Center of Mechatronics GmbH" BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// This file is part of X2C. http://www.mechatronic-simulation.org/
// $LastChangedRevision: 1111 $
// $LastChangedDate:: 2017-02-28 14:18:07 +0100#$
//
// Function to create 'builder.sce' for X2C libraries
// Parameters:
// libName - Library name
// varargin - (optional) project root directory for external blocks

function [] = createLibraryBuilder(libName, varargin)
funcprot(0);

// import necessary java classes
jimport at.lcm.x2c.utils.LibraryUtils;
jimport at.lcm.x2c.core.structure.ControlBlock;
jimport at.lcm.x2c.core.structure.Block;

// get file separator
fs = filesep(); 

// get system architecture
arch = getArchitecture();

// get operating system
os = getos();

// get XML file names
if length(varargin) == 0 then
    // internal library
    xmlPath = jinvoke(LibraryUtils, "getXmlDirectory", libName);
else
    // external library
    libRoot = jinvoke(LibraryUtils, "getLibraryRootDirectory", varargin(1))
    libRoot = jinvoke(libRoot, "toString");
    xmlPath = jinvoke(LibraryUtils, "getXmlDirectory", libName, libRoot);
end
xmlDir = jinvoke(xmlPath, "toString");


// get/create scilab directory
ScilabDir = strsubst(xmlDir, ["XML" + fs], ["Scilab" + fs]);
if ~isdir(ScilabDir) then
    mkdir(ScilabDir)
end

// get XML files
xmlFiles = dir(xmlDir + "*.xml");
xmlFiles = xmlFiles(2)';
xmlList = [];

// go through XML list
for curXML = xmlFiles
    if ~strcmp(part(curXML, $-3:$), ".xml") then
        // add file name with *.xml ending
        xmlList = [xmlList, curXML];
    end
end


// check if library already has a builder file
if isfile([ScilabDir + fs + "builder_" + arch + ".sce"]) then
    mprintf("Creation of builder file skipped (builder already exists).\n")
    return;
end

// create X2C_Utils.c file
err = createX2CUtils(ScilabDir);
if err ~= 0 then
    mprintf("Error: Couldn''t create x2c_Utils.c in %s\n!", ScilabDir)
end

try
    // open/create file
    fileID = mopen(ScilabDir + ["builder_" + arch + ".sce"], "wt");
    
    // print header
    time = datevec(datenum());
    mfprintf(fileID, "// This file was generated by %s on %02d-%02d-%04d %02d:%02d\n\n", "createLibraryBuilder.sce", time(3), time(2), time(1), time(4), time(5));
    // TODO: expand file header
    
    // print compiler stuff
    mfprintf(fileID, "funcprot(0);\n");
    mfprintf(fileID, "jimport at.lcm.x2c.utils.Utils;\n");
    
    mfprintf(fileID, "msvc = findmsvccompiler();\n");
    mfprintf(fileID, "if(msvc ~= '"unknown'") then \n");
    mfprintf(fileID, "    bOK = configure_msvc();\n");
    mfprintf(fileID, "end\n");

    mfprintf(fileID, "if ~haveacompiler() then\n");
    mfprintf(fileID, "    mprintf('"Building %s library for %s system skipped (no compiler found).\\n'");\n", libName, arch); 
    mfprintf(fileID, "    [compileCompFDone] = return(%%f)\n");
    mfprintf(fileID, "end\n\n");
    
    mfprintf(fileID, "X2C_ROOT = jinvoke(jinvoke(Utils, '"getRootDirectory'"), '"toString'");\n");
    mfprintf(fileID, "X2C_LIB_PATH = get_absolute_file_path('"builder_%s.sce'");\n", arch);
    mfprintf(fileID, "X2C_LIB_PATH = dirname(X2C_LIB_PATH);\n\n");
    
    mfprintf(fileID, "// delete '"is-compiled'" marker\n")
    mfprintf(fileID, "mdelete('"Library_is_compiled_for_%s.txt'");\n\n", arch);
    
    // go through all blocks in library
    names = "";
    files = "'"x2c_Utils.c'"";
    
    for curXml=xmlList
               
        try
            // read block XML file
            clear x2cBlock blockType BlockName
            x2cBlock = jinvoke(Block, "loadBlockXML", curXml);
            blockType = jinvoke(jinvoke(x2cBlock, "getClass"), "toString");
            BlockName = jinvoke(x2cBlock, "getName");
        
            // check block type
            if ~strcmp(blockType, "class at.lcm.x2c.core.structure.ControlBlock") then // normal Block
               
                // get implementation names
                ImplNames = jinvoke(x2cBlock, "getExistingImplementationNames");
                
                // Scilab restriction: variable or function names can't be longer than 24 characters, otherwise name will be truncated
                if length(varargin) == 0 then
                    // internal library
                    BlockName = getXcosBlockName(libName, BlockName);
                else
                    // external library
                    BlockName = getXcosBlockName(libName, BlockName, varargin(1));
                end
                
            else        // IO-Block
                ImplNames = getIODataTypes();
                BlockName = ["x2c_" + BlockName]
            end
            
            // fill arrays with function and file names
            for curImpl=ImplNames
                if isfile(ScilabDir + fs + BlockName + "_" + curImpl + "_C.c")
                    names = names + " '"" + BlockName + "_" + curImpl + "_C'"";
                    files = files + " '"" + BlockName + "_" + curImpl + "_C.c'"";
                end
            end
            
        catch
            // XML could not be read -> don't add block to library
        end
        
    end

    mfprintf(fileID, "names = [%s];\n", names);
    mfprintf(fileID, "files = [%s];\n", files);
    mfprintf(fileID, "flag = '"c'";\n");
    mfprintf(fileID, "loadername = '"loader_%s.sce'";\n", arch);
    mfprintf(fileID, "libname = '"%s_%s'";\n", libName, arch);
    mfprintf(fileID, "ldflags = SCI + '"%sbin%sscicos.lib'";\n", fs, fs);
    if (os == "Linux") then
        mfprintf(fileID, "cflags = '"-I%susr%sinclude%sscilab'" + '" -I'" + X2C_ROOT + '"%sController%sCommon'" + '" -I'" + X2C_LIB_PATH + '"%sController%ssrc'" + '" -I'" + X2C_LIB_PATH + '"%sController%sinc'" + '" -include string.h'";\n", fs, fs, fs, fs, fs, fs, fs, fs, fs);   // string.h is needed by gcc for memcpy
    else    
        mfprintf(fileID, "cflags = '"-I'" + SCI + '"%smodules%sscicos_blocks%sincludes'" + '" -I'" + SCI + '"%smodules%sscicos%sincludes'" + '" -I'" + X2C_ROOT + '"%sController%sCommon'" + '" -I'" + X2C_LIB_PATH + '"%sController%ssrc'" + '" -I'" + X2C_LIB_PATH + '"%sController%sinc'";\n", fs, fs, fs, fs, fs, fs, fs, fs, fs, fs, fs, fs);
    end
    //TODO: support for other os
    mfprintf(fileID, "ilib_for_link(names, files, [], flag, '"'", loadername, libname, ldflags, cflags);\n\n");
    
    mfprintf(fileID, "// delete temporary files\n");
    mfprintf(fileID, "if isdir('"Debug'") then\n");
    mfprintf(fileID, "  rmdir('"Debug'",'"s'");\n");
    mfprintf(fileID, "end\n");
    mfprintf(fileID, "if isdir('"Release'") then\n");
    mfprintf(fileID, "  rmdir('"Release'",'"s'");\n");
    mfprintf(fileID, "end\n");
    mfprintf(fileID, "mdelete('"cleaner.sce'")\n");
    mfprintf(fileID, "mdelete('"Makelib.mak'")\n\n");
    
    mfprintf(fileID, "// create '"is-compiled'" marker\n")
    mfprintf(fileID, "currentTime=clock();\n");
    mfprintf(fileID, "save('"Library_is_compiled_for_%s.txt'", '"currentTime'");\n\n", arch);
    
    mfprintf(fileID, "mprintf('"Library %s for %s system built.\\n'");\n", libName, arch); 
    
    // close file
    mclose(fileID);
    
    mprintf("Builder for library %s succesfully created.\n", libName);
    
catch
    // some error creating the file occured
    mclose(fileID);
    mprintf("Error creating builder for library %s: %s\n", libName, lasterror());
end


endfunction


function [err] = createX2CUtils(Dir)
// Function to create 'x2c_Utils.c' for compilation of X2C libraries
//
// $LastChangedRevision: 1111 $
// 
// Copyright (c) 2013, Linz Center of Mechatronics GmbH (LCM) http://www.lcm.at/
// All rights reserved.

try
    // open/create file
    fileID = mopen(Dir + "x2c_Utils.c", "wt");
    
    // print header
    time = datevec(datenum());
    mfprintf(fileID, "// This file was generated by %s on %02d-%02d-%04d %02d:%02d\n\n", "createLibraryBuilder.sce", time(3), time(2), time(1), time(4), time(5));
    // TODO: expand file header

    
    // print compiler stuff
    mfprintf(fileID, "#define SCILAB_SIM_FILE\n\n");
    
    mfprintf(fileID, "/* include scicos / xcos headers */\n");
    mfprintf(fileID, "#include <scicos.h>\n");
    mfprintf(fileID, "#include <scicos_block4.h>\n");
    mfprintf(fileID, "#include <scicos_malloc.h>\n");
    mfprintf(fileID, "#include <scicos_free.h>\n\n");
    
    mfprintf(fileID, "#ifdef DEBUG\n");
    mfprintf(fileID, "    #include <stdio.h>\n");
    mfprintf(fileID, "#endif\n\n");
    
    mfprintf(fileID, "/* include X2C utility files */\n");
    mfprintf(fileID, "#include <CommonFcts.h>\n");
    mfprintf(fileID, "#include <CommonFcts.c>\n");
    mfprintf(fileID, "#include <Atan_Data.h>\n");
    mfprintf(fileID, "#include <Atan_Data.c>\n");
    mfprintf(fileID, "#include <Exp_Data.h>\n");
    mfprintf(fileID, "#include <Exp_Data.c>\n");
    mfprintf(fileID, "#include <Sin_Data.h>\n");
    mfprintf(fileID, "#include <Sin_Data.c>\n");
    mfprintf(fileID, "#include <Sin2_Data.h>\n");
    mfprintf(fileID, "#include <Sin2_Data.c>\n");
    mfprintf(fileID, "#include <Sqrt_Data.h>\n");
    mfprintf(fileID, "#include <Sqrt_Data.c>\n");
    
    // close file
    mclose(fileID);
    
    err = 0;
catch
    // some error creating the file occured
    err = 1;
end

endfunction
