// This file is released under the 3-clause BSD license. See COPYING-BSD.
// Generated by builder.sce : Please, do not edit this file
// ----------------------------------------------------------------------------
//
if ~win64() then
  warning(_("This module requires a Windows x64 platform."));
  return
end
//
Control_x64_path = get_absolute_file_path('loader_x64.sce');
//
// ulink previous function with same name
[bOK, ilib] = c_link('x2c_AdaptivePT1_FiP8_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_AdaptivePT1_FiP16_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_AdaptivePT1_FiP32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_AdaptivePT1_Float32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_AdaptivePT1_Float64_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Delay_FiP16_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Delay_FiP32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Delay_Float32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Delay_Float64_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_DT1_FiP8_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_DT1_FiP16_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_DT1_FiP32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_DT1_Float32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_DT1_Float64_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_I_FiP8_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_I_FiP16_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_I_FiP32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_I_Float32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_I_Float64_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_PI_FiP8_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_PI_FiP16_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_PI_FiP32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_PI_Float32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_PI_Float64_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_PID_FiP8_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_PID_FiP16_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_PID_FiP32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_PID_Float32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_PID_Float64_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_PIDLimit_FiP8_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_PIDLimit_FiP16_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_PIDLimit_FiP32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_PIDLimit_Float32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_PIDLimit_Float64_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_PILimit_FiP8_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_PILimit_FiP16_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_PILimit_FiP32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_PILimit_Float32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_PILimit_Float64_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_PT1_FiP8_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_PT1_FiP16_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_PT1_FiP32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_PT1_Float32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_PT1_Float64_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_TDSystemO1_FiP8_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_TDSystemO1_FiP16_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_TDSystemO1_FiP32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_TDSystemO1_Float32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_TDSystemO1_Float64_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_TDSystemO2_FiP8_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_TDSystemO2_FiP16_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_TDSystemO2_FiP32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_TDSystemO2_Float32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_TDSystemO2_Float64_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_TF1_FiP8_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_TF1_FiP16_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_TF1_FiP32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_TF1_Float32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_TF1_Float64_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_TF2_FiP16_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_TF2_FiP8_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_TF2_FiP32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_TF2_Float32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_TF2_Float64_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_uI_FiP8_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_uI_FiP16_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_uI_FiP32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_uI_Float32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_uI_Float64_C');
if bOK then
  ulink(ilib);
end
//
link(Control_x64_path + 'libControl_x64' + getdynlibext(), ['x2c_AdaptivePT1_FiP8_C','x2c_AdaptivePT1_FiP16_C','x2c_AdaptivePT1_FiP32_C','x2c_AdaptivePT1_Float32_C','x2c_AdaptivePT1_Float64_C','x2c_Delay_FiP16_C','x2c_Delay_FiP32_C','x2c_Delay_Float32_C','x2c_Delay_Float64_C','x2c_DT1_FiP8_C','x2c_DT1_FiP16_C','x2c_DT1_FiP32_C','x2c_DT1_Float32_C','x2c_DT1_Float64_C','x2c_I_FiP8_C','x2c_I_FiP16_C','x2c_I_FiP32_C','x2c_I_Float32_C','x2c_I_Float64_C','x2c_PI_FiP8_C','x2c_PI_FiP16_C','x2c_PI_FiP32_C','x2c_PI_Float32_C','x2c_PI_Float64_C','x2c_PID_FiP8_C','x2c_PID_FiP16_C','x2c_PID_FiP32_C','x2c_PID_Float32_C','x2c_PID_Float64_C','x2c_PIDLimit_FiP8_C','x2c_PIDLimit_FiP16_C','x2c_PIDLimit_FiP32_C','x2c_PIDLimit_Float32_C','x2c_PIDLimit_Float64_C','x2c_PILimit_FiP8_C','x2c_PILimit_FiP16_C','x2c_PILimit_FiP32_C','x2c_PILimit_Float32_C','x2c_PILimit_Float64_C','x2c_PT1_FiP8_C','x2c_PT1_FiP16_C','x2c_PT1_FiP32_C','x2c_PT1_Float32_C','x2c_PT1_Float64_C','x2c_TDSystemO1_FiP8_C','x2c_TDSystemO1_FiP16_C','x2c_TDSystemO1_FiP32_C','x2c_TDSystemO1_Float32_C','x2c_TDSystemO1_Float64_C','x2c_TDSystemO2_FiP8_C','x2c_TDSystemO2_FiP16_C','x2c_TDSystemO2_FiP32_C','x2c_TDSystemO2_Float32_C','x2c_TDSystemO2_Float64_C','x2c_TF1_FiP8_C','x2c_TF1_FiP16_C','x2c_TF1_FiP32_C','x2c_TF1_Float32_C','x2c_TF1_Float64_C','x2c_TF2_FiP16_C','x2c_TF2_FiP8_C','x2c_TF2_FiP32_C','x2c_TF2_Float32_C','x2c_TF2_Float64_C','x2c_uI_FiP8_C','x2c_uI_FiP16_C','x2c_uI_FiP32_C','x2c_uI_Float32_C','x2c_uI_Float64_C'],'c');
// remove temp. variables on stack
clear Control_x64_path;
clear bOK;
clear ilib;
// ----------------------------------------------------------------------------
