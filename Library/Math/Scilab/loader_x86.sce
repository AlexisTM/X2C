// This file is released under the 3-clause BSD license. See COPYING-BSD.
// Generated by builder.sce : Please, do not edit this file
// ----------------------------------------------------------------------------
//
if win64() then
  warning(_("This module requires a Windows x86 platform."));
  return
end
//
Math_x86_path = get_absolute_file_path('loader_x86.sce');
//
// ulink previous function with same name
[bOK, ilib] = c_link('x2c_Abs_FiP8_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Abs_FiP16_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Abs_FiP32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Abs_Float32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Abs_Float64_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Add_FiP8_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Add_FiP16_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Add_FiP32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Add_Float32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Add_Float64_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Atan2_FiP8_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Atan2_FiP16_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Atan2_FiP32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Atan2_Float32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Atan2_Float64_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Average_FiP8_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Average_FiP16_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Average_FiP32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Average_Float32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Average_Float64_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Cos_FiP8_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Cos_FiP16_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Cos_FiP32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Cos_Float32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Cos_Float64_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Div_FiP8_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Div_FiP16_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Div_FiP32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Div_Float32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Div_Float64_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Exp_FiP8_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Exp_FiP16_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Exp_FiP32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_L2Norm_FiP8_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_L2Norm_FiP16_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_L2Norm_FiP32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_L2Norm_Float32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_L2Norm_Float64_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Mult_FiP8_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Mult_FiP16_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Mult_FiP32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Mult_Float32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Mult_Float64_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Negation_FiP8_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Negation_FiP16_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Negation_FiP32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Negation_Float32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Negation_Float64_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Sign_FiP8_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Sign_FiP16_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Sign_FiP32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Sin_FiP8_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Sin_FiP16_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Sin_FiP32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Sin_Float32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Sin_Float64_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Sqrt_FiP8_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Sqrt_FiP16_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Sqrt_FiP32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Sqrt_Float32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Sqrt_Float64_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Sub_FiP8_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Sub_FiP16_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Sub_FiP32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Sub_Float32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Sub_Float64_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Sum_FiP8_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Sum_FiP16_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Sum_FiP32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Sum_Float32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_Sum_Float64_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_uAdd_FiP8_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_uAdd_FiP16_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_uAdd_FiP32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_uAdd_Float32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_uAdd_Float64_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_uSub_FiP8_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_uSub_FiP16_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_uSub_FiP32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_uSub_Float32_C');
if bOK then
  ulink(ilib);
end
//
[bOK, ilib] = c_link('x2c_uSub_Float64_C');
if bOK then
  ulink(ilib);
end
//
link(Math_x86_path + 'libMath_x86' + getdynlibext(), ['x2c_Abs_FiP8_C','x2c_Abs_FiP16_C','x2c_Abs_FiP32_C','x2c_Abs_Float32_C','x2c_Abs_Float64_C','x2c_Add_FiP8_C','x2c_Add_FiP16_C','x2c_Add_FiP32_C','x2c_Add_Float32_C','x2c_Add_Float64_C','x2c_Atan2_FiP8_C','x2c_Atan2_FiP16_C','x2c_Atan2_FiP32_C','x2c_Atan2_Float32_C','x2c_Atan2_Float64_C','x2c_Average_FiP8_C','x2c_Average_FiP16_C','x2c_Average_FiP32_C','x2c_Average_Float32_C','x2c_Average_Float64_C','x2c_Cos_FiP8_C','x2c_Cos_FiP16_C','x2c_Cos_FiP32_C','x2c_Cos_Float32_C','x2c_Cos_Float64_C','x2c_Div_FiP8_C','x2c_Div_FiP16_C','x2c_Div_FiP32_C','x2c_Div_Float32_C','x2c_Div_Float64_C','x2c_Exp_FiP8_C','x2c_Exp_FiP16_C','x2c_Exp_FiP32_C','x2c_L2Norm_FiP8_C','x2c_L2Norm_FiP16_C','x2c_L2Norm_FiP32_C','x2c_L2Norm_Float32_C','x2c_L2Norm_Float64_C','x2c_Mult_FiP8_C','x2c_Mult_FiP16_C','x2c_Mult_FiP32_C','x2c_Mult_Float32_C','x2c_Mult_Float64_C','x2c_Negation_FiP8_C','x2c_Negation_FiP16_C','x2c_Negation_FiP32_C','x2c_Negation_Float32_C','x2c_Negation_Float64_C','x2c_Sign_FiP8_C','x2c_Sign_FiP16_C','x2c_Sign_FiP32_C','x2c_Sin_FiP8_C','x2c_Sin_FiP16_C','x2c_Sin_FiP32_C','x2c_Sin_Float32_C','x2c_Sin_Float64_C','x2c_Sqrt_FiP8_C','x2c_Sqrt_FiP16_C','x2c_Sqrt_FiP32_C','x2c_Sqrt_Float32_C','x2c_Sqrt_Float64_C','x2c_Sub_FiP8_C','x2c_Sub_FiP16_C','x2c_Sub_FiP32_C','x2c_Sub_Float32_C','x2c_Sub_Float64_C','x2c_Sum_FiP8_C','x2c_Sum_FiP16_C','x2c_Sum_FiP32_C','x2c_Sum_Float32_C','x2c_Sum_Float64_C','x2c_uAdd_FiP8_C','x2c_uAdd_FiP16_C','x2c_uAdd_FiP32_C','x2c_uAdd_Float32_C','x2c_uAdd_Float64_C','x2c_uSub_FiP8_C','x2c_uSub_FiP16_C','x2c_uSub_FiP32_C','x2c_uSub_Float32_C','x2c_uSub_Float64_C'],'c');
// remove temp. variables on stack
clear Math_x86_path;
clear bOK;
clear ilib;
// ----------------------------------------------------------------------------
